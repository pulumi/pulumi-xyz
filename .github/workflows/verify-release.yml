name: "Verify Release"

on:
  pull_request:
    paths-ignore:
    - CHANGELOG.md

env:
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PULUMI_MISSING_DOCS_ERROR: "true"
  TF_APPEND_USER_AGENT: pulumi
  XYZ_REGION: us-west-2
  MISE_WINDOWS_EXECUTABLE_EXTENSIONS: ",exe,bat,cmd,com,ps1,vbs"

jobs:
  verify-release:
    name: verify-release
    strategy:
      matrix:
        runner: ["ubuntu-latest", "windows-latest", "macos-latest"]
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Configure Git to checkout files with long names
        run: git config --global core.longpaths true
      - name: Checkout Repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false      
      - env:
          ESC_ACTION_ENVIRONMENT: github-secrets/${{ github.repository_owner }}-${{ github.event.repository.name }}
          ESC_ACTION_EXPORT_ENVIRONMENT_VARIABLES: "false"
          ESC_ACTION_OIDC_AUTH: "true"
          ESC_ACTION_OIDC_ORGANIZATION: pulumi
          ESC_ACTION_OIDC_REQUESTED_TOKEN_TYPE: urn:pulumi:token-type:access_token:organization
        id: esc-secrets
        name: Fetch secrets from ESC
        uses: pulumi/esc-action@9eb774255b1a4afb7855678ae8d4a77359da0d9b

      - name: Provide bash shim for mise
        if: matrix.runner == 'windows-latest'
        shell: pwsh
        run: |
          $bashExe = "${env:ProgramFiles}\Git\bin\bash.exe"
          if (!(Test-Path $bashExe)) {
            throw "Git Bash not found at $bashExe"
          }

          $shimDir = Join-Path $env:RUNNER_TEMP 'mise-shims'
          New-Item -ItemType Directory -Force -Path $shimDir | Out-Null

          $shim = Join-Path $shimDir 'bash'
          if (Test-Path $shim) { Remove-Item $shim -Force }

          cmd /c "mklink ""$shim"" ""$bashExe""" | Write-Host

          Add-Content -Path $env:GITHUB_ENV -Value ("PATH={0};{1}" -f $shimDir, $env:PATH)
          Add-Content -Path $env:GITHUB_ENV -Value 'MISE_WINDOWS_EXECUTABLE_EXTENSIONS=,exe,bat,cmd,com,ps1,vbs'

          Write-Host "=== shim dir contents ==="
          Get-ChildItem $shimDir -Force | Format-List

          Write-Host "=== where bash ==="
          cmd /c "where bash"

      - name: Debug bash resolution
        if: matrix.runner == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "PATH (first entries):"
          ($env:PATH -split ';')[0..5]
          Write-Host "`nGet-Command bash:"
          Get-Command bash | Format-List
          Write-Host "`nTest shim:"
          $shim = Join-Path $env:RUNNER_TEMP "mise-shims\bash"
          Test-Path $shim
          cmd /c "where bash"

      - name: Install mise manually
        if: matrix.runner == 'windows-latest'
        shell: pwsh
        run: |
          $version = 'v2025.7.12'
          $zip     = Join-Path $env:RUNNER_TEMP "mise-$version.zip"
          $dest    = Join-Path $env:RUNNER_TEMP "mise-extracted"
          $shimDir = Join-Path $env:RUNNER_TEMP "mise-shims"

          Invoke-WebRequest `
            -Uri "https://github.com/jdx/mise/releases/download/$version/mise-$version-windows-x64.zip" `
            -OutFile $zip

          Expand-Archive -Path $zip -DestinationPath $dest -Force
          Get-ChildItem $dest -Recurse | ForEach-Object {
            Move-Item $_.FullName -Destination $shimDir -Force
          }
      - name: Verify mise
        if: matrix.runner == 'windows-latest'
        env:
          MISE_LOG_LEVEL: info
          MISE_TRUSTED_CONFIG_PATHS: /Users/runner/work/pulumi-xyz/pulumi-xyz
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MISE_YES: 1
        shell: pwsh
        run: |
          mise --version
          mise doctor
          mise install
          mise ls
          mise env --json

      - name: Setup mise
        uses: jdx/mise-action@5ac50f778e26fac95da98d50503682459e86d566 # v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          cache_key: "mise-{{platform}}-{{file_hash}}"
          cache: false
          # only saving the cache in the prerequisites job
          cache_save: false
